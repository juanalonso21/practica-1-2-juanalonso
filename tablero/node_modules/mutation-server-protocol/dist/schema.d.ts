/**
 * Use named imports to improve tree-shaking capabilities.
 */
import { type z } from 'zod';
export declare const ConfigureParams: z.ZodObject<{
    /**
     * The (relative or absolute) path to mutation testing framework's config file to load.
     */
    configFilePath: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    configFilePath?: string | undefined;
}, {
    configFilePath?: string | undefined;
}>;
export type ConfigureParams = z.infer<typeof ConfigureParams>;
export declare const ConfigureResult: z.ZodObject<{
    /**
     * The mutation testing server protocol major version that the server supports.
     * For example, "1"
     */
    version: z.ZodString;
}, "strip", z.ZodTypeAny, {
    version: string;
}, {
    version: string;
}>;
export type ConfigureResult = z.infer<typeof ConfigureResult>;
export declare const Location: z.ZodObject<{
    start: z.ZodObject<{
        line: z.ZodNumber;
        column: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        line: number;
        column: number;
    }, {
        line: number;
        column: number;
    }>;
    end: z.ZodObject<{
        line: z.ZodNumber;
        column: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        line: number;
        column: number;
    }, {
        line: number;
        column: number;
    }>;
}, "strip", z.ZodTypeAny, {
    start: {
        line: number;
        column: number;
    };
    end: {
        line: number;
        column: number;
    };
}, {
    start: {
        line: number;
        column: number;
    };
    end: {
        line: number;
        column: number;
    };
}>;
export type Location = z.infer<typeof Location>;
/**
 * Represents a file or directory and an optional range within that file.
 */
export declare const FileRange: z.ZodObject<{
    /**
     * File or directory path. A path ending in `/` indicates a directory.
     */
    path: z.ZodString;
    /**
     * Optional code range within the file. If omitted, the entire file is considered.
     */
    range: z.ZodOptional<z.ZodObject<{
        start: z.ZodObject<{
            line: z.ZodNumber;
            column: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            line: number;
            column: number;
        }, {
            line: number;
            column: number;
        }>;
        end: z.ZodObject<{
            line: z.ZodNumber;
            column: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            line: number;
            column: number;
        }, {
            line: number;
            column: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    }, {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    }>>;
}, "strip", z.ZodTypeAny, {
    path: string;
    range?: {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    } | undefined;
}, {
    path: string;
    range?: {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    } | undefined;
}>;
export type FileRange = z.infer<typeof FileRange>;
export declare const DiscoverParams: z.ZodObject<{
    /**
     * The files or directories to run discovery on, or undefined to discover all files in the current project.
     */
    files: z.ZodOptional<z.ZodArray<z.ZodObject<{
        /**
         * File or directory path. A path ending in `/` indicates a directory.
         */
        path: z.ZodString;
        /**
         * Optional code range within the file. If omitted, the entire file is considered.
         */
        range: z.ZodOptional<z.ZodObject<{
            start: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
            end: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }>>;
    }, "strip", z.ZodTypeAny, {
        path: string;
        range?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }, {
        path: string;
        range?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    files?: {
        path: string;
        range?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }[] | undefined;
}, {
    files?: {
        path: string;
        range?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }[] | undefined;
}>;
export type DiscoverParams = z.infer<typeof DiscoverParams>;
export declare const DiscoveredMutant: z.ZodObject<{
    id: z.ZodString;
    location: z.ZodObject<{
        start: z.ZodObject<{
            line: z.ZodNumber;
            column: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            line: number;
            column: number;
        }, {
            line: number;
            column: number;
        }>;
        end: z.ZodObject<{
            line: z.ZodNumber;
            column: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            line: number;
            column: number;
        }, {
            line: number;
            column: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    }, {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    }>;
    description: z.ZodOptional<z.ZodString>;
    mutatorName: z.ZodString;
    replacement: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    location: {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    };
    mutatorName: string;
    description?: string | undefined;
    replacement?: string | undefined;
}, {
    id: string;
    location: {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    };
    mutatorName: string;
    description?: string | undefined;
    replacement?: string | undefined;
}>;
export type DiscoveredMutant = z.infer<typeof DiscoveredMutant>;
export declare const DiscoveredFile: z.ZodObject<{
    mutants: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        location: z.ZodObject<{
            start: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
            end: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }>;
        description: z.ZodOptional<z.ZodString>;
        mutatorName: z.ZodString;
        replacement: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
    }, {
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    mutants: {
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
    }[];
}, {
    mutants: {
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
    }[];
}>;
export type DiscoveredFile = z.infer<typeof DiscoveredFile>;
export declare const DiscoveredFiles: z.ZodRecord<z.ZodString, z.ZodObject<{
    mutants: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        location: z.ZodObject<{
            start: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
            end: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }>;
        description: z.ZodOptional<z.ZodString>;
        mutatorName: z.ZodString;
        replacement: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
    }, {
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    mutants: {
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
    }[];
}, {
    mutants: {
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
    }[];
}>>;
export type DiscoveredFiles = z.infer<typeof DiscoveredFiles>;
export declare const DiscoverResult: z.ZodObject<{
    files: z.ZodRecord<z.ZodString, z.ZodObject<{
        mutants: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            location: z.ZodObject<{
                start: z.ZodObject<{
                    line: z.ZodNumber;
                    column: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    line: number;
                    column: number;
                }, {
                    line: number;
                    column: number;
                }>;
                end: z.ZodObject<{
                    line: z.ZodNumber;
                    column: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    line: number;
                    column: number;
                }, {
                    line: number;
                    column: number;
                }>;
            }, "strip", z.ZodTypeAny, {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            }, {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            }>;
            description: z.ZodOptional<z.ZodString>;
            mutatorName: z.ZodString;
            replacement: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
        }, {
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        mutants: {
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
        }[];
    }, {
        mutants: {
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
        }[];
    }>>;
}, "strip", z.ZodTypeAny, {
    files: Record<string, {
        mutants: {
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
        }[];
    }>;
}, {
    files: Record<string, {
        mutants: {
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
        }[];
    }>;
}>;
export type DiscoverResult = z.infer<typeof DiscoverResult>;
/**
 * The specific targets to run mutation testing on, or if both properties are left undefined: run mutation testing on all files in the current project.
 * Only one of the two properties should be set.
 * If both properties are set, the `mutants` property takes precedence.
 */
export declare const MutationTestParams: z.ZodObject<{
    /**
     * Specific source files or directories to run mutation testing on, optionally scoped by range.
     * If both `files` and `mutants` are omitted, all discovered files will be tested.
     */
    files: z.ZodOptional<z.ZodArray<z.ZodObject<{
        /**
         * File or directory path. A path ending in `/` indicates a directory.
         */
        path: z.ZodString;
        /**
         * Optional code range within the file. If omitted, the entire file is considered.
         */
        range: z.ZodOptional<z.ZodObject<{
            start: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
            end: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }>>;
    }, "strip", z.ZodTypeAny, {
        path: string;
        range?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }, {
        path: string;
        range?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }>, "many">>;
    /**
     * Specific previously discovered mutants to run mutation testing on,
     * as returned from the `discover` step.
     */
    mutants: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        mutants: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            location: z.ZodObject<{
                start: z.ZodObject<{
                    line: z.ZodNumber;
                    column: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    line: number;
                    column: number;
                }, {
                    line: number;
                    column: number;
                }>;
                end: z.ZodObject<{
                    line: z.ZodNumber;
                    column: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    line: number;
                    column: number;
                }, {
                    line: number;
                    column: number;
                }>;
            }, "strip", z.ZodTypeAny, {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            }, {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            }>;
            description: z.ZodOptional<z.ZodString>;
            mutatorName: z.ZodString;
            replacement: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
        }, {
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        mutants: {
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
        }[];
    }, {
        mutants: {
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
        }[];
    }>>>;
}, "strip", z.ZodTypeAny, {
    files?: {
        path: string;
        range?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }[] | undefined;
    mutants?: Record<string, {
        mutants: {
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
        }[];
    }> | undefined;
}, {
    files?: {
        path: string;
        range?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }[] | undefined;
    mutants?: Record<string, {
        mutants: {
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
        }[];
    }> | undefined;
}>;
export type MutationTestParams = z.infer<typeof MutationTestParams>;
declare const MutantStatus: z.ZodEnum<["Killed", "Survived", "NoCoverage", "CompileError", "RuntimeError", "Timeout", "Ignored", "Pending"]>;
export type MutantStatus = z.infer<typeof MutantStatus>;
export declare const MutantResult: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    location: z.ZodObject<{
        start: z.ZodObject<{
            line: z.ZodNumber;
            column: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            line: number;
            column: number;
        }, {
            line: number;
            column: number;
        }>;
        end: z.ZodObject<{
            line: z.ZodNumber;
            column: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            line: number;
            column: number;
        }, {
            line: number;
            column: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    }, {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    }>;
    description: z.ZodOptional<z.ZodString>;
    mutatorName: z.ZodString;
    replacement: z.ZodOptional<z.ZodString>;
}, {
    /**
     * The test ids that covered this mutant. If a mutation testing framework doesn't measure this information, it can simply be left out.
     */
    coveredBy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /**
     * The net time it took to test this mutant in milliseconds. This is the time measurement without overhead from the mutation testing framework.
     */
    duration: z.ZodOptional<z.ZodNumber>;
    /**
     * The test ids that killed this mutant. It is a best practice to "bail" on first failing test, in which case you can fill this array with that one test.
     */
    killedBy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /**
     * A static mutant means that it was loaded once at during initialization, this makes it slow or even impossible to test, depending on the mutation testing framework.
     */
    static: z.ZodOptional<z.ZodBoolean>;
    /**
     * The status of the mutant.
     */
    status: z.ZodEnum<["Killed", "Survived", "NoCoverage", "CompileError", "RuntimeError", "Timeout", "Ignored", "Pending"]>;
    /**
     * The reason that this mutant has this status as free-format text. In the case of a killed mutant, this should be filled with the failure message(s) of the failing tests. In case of an error mutant, this should be filled with the error message.
     */
    statusReason: z.ZodOptional<z.ZodString>;
    /**
     * The number of tests actually completed in order to test this mutant. Can differ from "coveredBy" because of bailing a mutant test run after first failing test.
     */
    testsCompleted: z.ZodOptional<z.ZodNumber>;
}>, "strip", z.ZodTypeAny, {
    status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
    id: string;
    location: {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    };
    mutatorName: string;
    description?: string | undefined;
    replacement?: string | undefined;
    coveredBy?: string[] | undefined;
    duration?: number | undefined;
    killedBy?: string[] | undefined;
    static?: boolean | undefined;
    statusReason?: string | undefined;
    testsCompleted?: number | undefined;
}, {
    status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
    id: string;
    location: {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    };
    mutatorName: string;
    description?: string | undefined;
    replacement?: string | undefined;
    coveredBy?: string[] | undefined;
    duration?: number | undefined;
    killedBy?: string[] | undefined;
    static?: boolean | undefined;
    statusReason?: string | undefined;
    testsCompleted?: number | undefined;
}>;
export type MutantResult = z.infer<typeof MutantResult>;
export declare const MutantResultFile: z.ZodObject<{
    mutants: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        location: z.ZodObject<{
            start: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
            end: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }>;
        description: z.ZodOptional<z.ZodString>;
        mutatorName: z.ZodString;
        replacement: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The test ids that covered this mutant. If a mutation testing framework doesn't measure this information, it can simply be left out.
         */
        coveredBy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        /**
         * The net time it took to test this mutant in milliseconds. This is the time measurement without overhead from the mutation testing framework.
         */
        duration: z.ZodOptional<z.ZodNumber>;
        /**
         * The test ids that killed this mutant. It is a best practice to "bail" on first failing test, in which case you can fill this array with that one test.
         */
        killedBy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        /**
         * A static mutant means that it was loaded once at during initialization, this makes it slow or even impossible to test, depending on the mutation testing framework.
         */
        static: z.ZodOptional<z.ZodBoolean>;
        /**
         * The status of the mutant.
         */
        status: z.ZodEnum<["Killed", "Survived", "NoCoverage", "CompileError", "RuntimeError", "Timeout", "Ignored", "Pending"]>;
        /**
         * The reason that this mutant has this status as free-format text. In the case of a killed mutant, this should be filled with the failure message(s) of the failing tests. In case of an error mutant, this should be filled with the error message.
         */
        statusReason: z.ZodOptional<z.ZodString>;
        /**
         * The number of tests actually completed in order to test this mutant. Can differ from "coveredBy" because of bailing a mutant test run after first failing test.
         */
        testsCompleted: z.ZodOptional<z.ZodNumber>;
    }>, "strip", z.ZodTypeAny, {
        status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
        coveredBy?: string[] | undefined;
        duration?: number | undefined;
        killedBy?: string[] | undefined;
        static?: boolean | undefined;
        statusReason?: string | undefined;
        testsCompleted?: number | undefined;
    }, {
        status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
        coveredBy?: string[] | undefined;
        duration?: number | undefined;
        killedBy?: string[] | undefined;
        static?: boolean | undefined;
        statusReason?: string | undefined;
        testsCompleted?: number | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    mutants: {
        status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
        coveredBy?: string[] | undefined;
        duration?: number | undefined;
        killedBy?: string[] | undefined;
        static?: boolean | undefined;
        statusReason?: string | undefined;
        testsCompleted?: number | undefined;
    }[];
}, {
    mutants: {
        status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
        coveredBy?: string[] | undefined;
        duration?: number | undefined;
        killedBy?: string[] | undefined;
        static?: boolean | undefined;
        statusReason?: string | undefined;
        testsCompleted?: number | undefined;
    }[];
}>;
export type MutantResultFile = z.infer<typeof MutantResultFile>;
export declare const MutationResultFiles: z.ZodRecord<z.ZodString, z.ZodObject<{
    mutants: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        location: z.ZodObject<{
            start: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
            end: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }>;
        description: z.ZodOptional<z.ZodString>;
        mutatorName: z.ZodString;
        replacement: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The test ids that covered this mutant. If a mutation testing framework doesn't measure this information, it can simply be left out.
         */
        coveredBy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        /**
         * The net time it took to test this mutant in milliseconds. This is the time measurement without overhead from the mutation testing framework.
         */
        duration: z.ZodOptional<z.ZodNumber>;
        /**
         * The test ids that killed this mutant. It is a best practice to "bail" on first failing test, in which case you can fill this array with that one test.
         */
        killedBy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        /**
         * A static mutant means that it was loaded once at during initialization, this makes it slow or even impossible to test, depending on the mutation testing framework.
         */
        static: z.ZodOptional<z.ZodBoolean>;
        /**
         * The status of the mutant.
         */
        status: z.ZodEnum<["Killed", "Survived", "NoCoverage", "CompileError", "RuntimeError", "Timeout", "Ignored", "Pending"]>;
        /**
         * The reason that this mutant has this status as free-format text. In the case of a killed mutant, this should be filled with the failure message(s) of the failing tests. In case of an error mutant, this should be filled with the error message.
         */
        statusReason: z.ZodOptional<z.ZodString>;
        /**
         * The number of tests actually completed in order to test this mutant. Can differ from "coveredBy" because of bailing a mutant test run after first failing test.
         */
        testsCompleted: z.ZodOptional<z.ZodNumber>;
    }>, "strip", z.ZodTypeAny, {
        status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
        coveredBy?: string[] | undefined;
        duration?: number | undefined;
        killedBy?: string[] | undefined;
        static?: boolean | undefined;
        statusReason?: string | undefined;
        testsCompleted?: number | undefined;
    }, {
        status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
        coveredBy?: string[] | undefined;
        duration?: number | undefined;
        killedBy?: string[] | undefined;
        static?: boolean | undefined;
        statusReason?: string | undefined;
        testsCompleted?: number | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    mutants: {
        status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
        coveredBy?: string[] | undefined;
        duration?: number | undefined;
        killedBy?: string[] | undefined;
        static?: boolean | undefined;
        statusReason?: string | undefined;
        testsCompleted?: number | undefined;
    }[];
}, {
    mutants: {
        status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
        id: string;
        location: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        };
        mutatorName: string;
        description?: string | undefined;
        replacement?: string | undefined;
        coveredBy?: string[] | undefined;
        duration?: number | undefined;
        killedBy?: string[] | undefined;
        static?: boolean | undefined;
        statusReason?: string | undefined;
        testsCompleted?: number | undefined;
    }[];
}>>;
export type MutationResultFiles = z.infer<typeof MutationResultFiles>;
export declare const MutationTestResult: z.ZodObject<{
    files: z.ZodRecord<z.ZodString, z.ZodObject<{
        mutants: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            location: z.ZodObject<{
                start: z.ZodObject<{
                    line: z.ZodNumber;
                    column: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    line: number;
                    column: number;
                }, {
                    line: number;
                    column: number;
                }>;
                end: z.ZodObject<{
                    line: z.ZodNumber;
                    column: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    line: number;
                    column: number;
                }, {
                    line: number;
                    column: number;
                }>;
            }, "strip", z.ZodTypeAny, {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            }, {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            }>;
            description: z.ZodOptional<z.ZodString>;
            mutatorName: z.ZodString;
            replacement: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The test ids that covered this mutant. If a mutation testing framework doesn't measure this information, it can simply be left out.
             */
            coveredBy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            /**
             * The net time it took to test this mutant in milliseconds. This is the time measurement without overhead from the mutation testing framework.
             */
            duration: z.ZodOptional<z.ZodNumber>;
            /**
             * The test ids that killed this mutant. It is a best practice to "bail" on first failing test, in which case you can fill this array with that one test.
             */
            killedBy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            /**
             * A static mutant means that it was loaded once at during initialization, this makes it slow or even impossible to test, depending on the mutation testing framework.
             */
            static: z.ZodOptional<z.ZodBoolean>;
            /**
             * The status of the mutant.
             */
            status: z.ZodEnum<["Killed", "Survived", "NoCoverage", "CompileError", "RuntimeError", "Timeout", "Ignored", "Pending"]>;
            /**
             * The reason that this mutant has this status as free-format text. In the case of a killed mutant, this should be filled with the failure message(s) of the failing tests. In case of an error mutant, this should be filled with the error message.
             */
            statusReason: z.ZodOptional<z.ZodString>;
            /**
             * The number of tests actually completed in order to test this mutant. Can differ from "coveredBy" because of bailing a mutant test run after first failing test.
             */
            testsCompleted: z.ZodOptional<z.ZodNumber>;
        }>, "strip", z.ZodTypeAny, {
            status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
            coveredBy?: string[] | undefined;
            duration?: number | undefined;
            killedBy?: string[] | undefined;
            static?: boolean | undefined;
            statusReason?: string | undefined;
            testsCompleted?: number | undefined;
        }, {
            status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
            coveredBy?: string[] | undefined;
            duration?: number | undefined;
            killedBy?: string[] | undefined;
            static?: boolean | undefined;
            statusReason?: string | undefined;
            testsCompleted?: number | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        mutants: {
            status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
            coveredBy?: string[] | undefined;
            duration?: number | undefined;
            killedBy?: string[] | undefined;
            static?: boolean | undefined;
            statusReason?: string | undefined;
            testsCompleted?: number | undefined;
        }[];
    }, {
        mutants: {
            status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
            coveredBy?: string[] | undefined;
            duration?: number | undefined;
            killedBy?: string[] | undefined;
            static?: boolean | undefined;
            statusReason?: string | undefined;
            testsCompleted?: number | undefined;
        }[];
    }>>;
}, "strip", z.ZodTypeAny, {
    files: Record<string, {
        mutants: {
            status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
            coveredBy?: string[] | undefined;
            duration?: number | undefined;
            killedBy?: string[] | undefined;
            static?: boolean | undefined;
            statusReason?: string | undefined;
            testsCompleted?: number | undefined;
        }[];
    }>;
}, {
    files: Record<string, {
        mutants: {
            status: "Killed" | "Survived" | "NoCoverage" | "CompileError" | "RuntimeError" | "Timeout" | "Ignored" | "Pending";
            id: string;
            location: {
                start: {
                    line: number;
                    column: number;
                };
                end: {
                    line: number;
                    column: number;
                };
            };
            mutatorName: string;
            description?: string | undefined;
            replacement?: string | undefined;
            coveredBy?: string[] | undefined;
            duration?: number | undefined;
            killedBy?: string[] | undefined;
            static?: boolean | undefined;
            statusReason?: string | undefined;
            testsCompleted?: number | undefined;
        }[];
    }>;
}>;
export type MutationTestResult = z.infer<typeof MutationTestResult>;
export {};
//# sourceMappingURL=schema.d.ts.map