import { DiscoverParams, DiscoverResult, ConfigureParams, ConfigureResult, MutationTestParams } from 'mutation-server-protocol';
import { createInjector } from 'typed-inject';
import { Observable } from 'rxjs';
import { MutantResult, PartialStrykerOptions } from '@stryker-mutator/api/core';
export declare const rpcMethods: Readonly<{
    configure: "configure";
    discover: "discover";
    mutationTest: "mutationTest";
    reportMutationTestProgressNotification: "reportMutationTestProgress";
}>;
/**
 * An implementation of the mutation testing server protocol for StrykerJS.
 * - Methods: `initialize`, `discover`, `mutationTest`
 *
 * @see https://github.com/stryker-mutator/editor-plugins/tree/main/packages/mutation-server-protocol#readme
 */
export declare class StrykerServer {
    #private;
    private readonly cliOptions;
    private readonly injectorFactory;
    /**
     *
     * @param cliOptions The cli options.
     * @param injectorFactory The injector factory, for testing purposes only
     */
    constructor(cliOptions?: PartialStrykerOptions, injectorFactory?: typeof createInjector);
    /**
     * Starts the server and listens for incoming connections.
     * @returns The port the server is listening on
     */
    start(): Promise<number>;
    stop(): Promise<void>;
    configure(configureParams: ConfigureParams): ConfigureResult;
    discover(discoverParams: DiscoverParams): Promise<DiscoverResult>;
    mutationTest(mutationTestParams: MutationTestParams): Observable<MutantResult>;
}
//# sourceMappingURL=stryker-server.d.ts.map